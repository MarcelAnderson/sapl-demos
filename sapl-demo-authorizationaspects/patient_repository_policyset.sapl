// Import the filter library, so that 'blacken' can be used directly instead of using the absolute name 'filter.blacken'.
import filter.*

set "SecurePatientRepository"

/*
 * The 'first-applicable' combination algorithm is used here in oder to avoid 'transformation uncertainty',
 * i.e., multiple policies which return PERMIT but do not agree about transformation of the resource.
 * This algorithm evaluates policies from top to bottom in the document and stops as soon as one policy 
 * yields an applicable result or errors.
 */
first-applicable

/*
 * This 'for' statement ensures, that the policies are only checked when they are actions, e.g., method calls,
 * in the designated Java class.
 */
for action.java.declaringTypeName == "org.demo.SecurePatientRepository"

/*
 * All doctors and nurses have full read access on all patient records.
 */
policy "doctor and nurse access to patient data"
permit 
       action.java.shortSig == "SecurePatientRepository.findById(..)"
where 
       "DOCTOR" in subject..authority || "NURSE" in subject..authority; 

/*
 * Administrators read access patients, however the classification and diagnosis are blackened in parts
 * also administrator access is to be documented.
 */
policy "administrator access to patient data"
permit 
       action.java.shortSig == "SecurePatientRepository.findById(..)"
where 
       "ADMIN" in subject..authority;
obligation  
		{ 
        	"type" : "logAccess",
			"message" : subject.name + " has accessed patient data as an administrator."
		}  
transform 
		// filtering with text blackening
		resource |- { 
						@.icd11Code : blacken(2,0,"\u2588"),
						@.diagnosisText : blacken(0,0,"\u2588") 
					}

/*
 * Visitors which are relatives may see phone number.
 */
policy "visiting relatives access patient data"
permit 
       action.java.shortSig == "SecurePatientRepository.findById(..)"
where 
       "VISITOR" in subject..authority;
        /*
         * The next condition invokes the "patient" policy information point and 
         * determines the "relatives" attribute of id of the patient.
         * The policy information policy point accesses the database to determine 
         * the relatives of the patient and it is checked if the subject is in the 
         * list of relatives.
         */
       subject.name in resource.id.<patient.relatives>; 
transform 
		// Subtractive template with filters removing content
		resource |- { 
						@.icd11Code 			: remove,
						@.diagnosisText 		: remove,
						@.medicalRecordNumber 	: remove, 
						@.attendingDoctor 		: remove, 
						@.attendingNurse 		: remove 
					}

/*
 * Visitors which are not relatives may see the phone number and name only.
 */
policy "visiting relatives access patient data"
permit 
       action.java.shortSig == "SecurePatientRepository.findById(..)"
where 
       "VISITOR" in subject..authority;
transform
		// Constructive template 
		{ 
			"id" 			: resource.id,
			"name" 			: resource.name,
			"phoneNumber"	: resource.phoneNumber
		}
