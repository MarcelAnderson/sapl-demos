package org.demo.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;

import org.demo.domain.Patient;
import org.demo.domain.PatientRepository;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.sapl.api.pdp.Decision;
import io.sapl.spring.method.metadata.PreEnforce;
import io.sapl.spring.pep.PolicyEnforcementPoint;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequiredArgsConstructor
public class UIController {

	private static final String REDIRECT_PATIENTS = "redirect:/patients";

	private final ObjectMapper om;

	private final PolicyEnforcementPoint pep;

	private final PatientRepository patientenRepo;

	@ResponseStatus(value = HttpStatus.NOT_FOUND)
	public static class ResourceNotFoundException extends RuntimeException {

	}

	@PreEnforce
	@GetMapping("/patients")
	public String getPatients(HttpServletRequest request, Model model, Authentication authentication) {
		model.addAttribute("patients", patientenRepo.findAll());
		model.addAttribute("permittedToUseCreatePatientButton",
				isPermitted(authentication, "use", "ui:view:patients:createPatientButton"));
		return "patients";
	}

	@PreEnforce
	@PostMapping("/patients")
	public String createPatient(@ModelAttribute(value = "newPatient") Patient patient) {
		if (patient.getId() != null) {
			throw new IllegalArgumentException("Patient has a predefined id. Should be autogenerated.");
		}
		patientenRepo.save(patient);
		return REDIRECT_PATIENTS;
	}

	@PreEnforce
	@GetMapping("/patients/new")
	public String newPatient(Model model) {
		Patient patient = new Patient();
		model.addAttribute("patient", patient);
		return "newPatient";
	}

	@PreEnforce
	@GetMapping("/patients/{id}")
	public String getPatient(@PathVariable Long id, Model model, Authentication authentication) throws IOException {
		Patient patient = patientenRepo.findById(id).orElseThrow(ResourceNotFoundException::new);
		model.addAttribute("patient", patient);
		model.addAttribute("permittedToUseUpdatePatientButton",
				isPermitted(authentication, "use", "ui:view:patient:updatePatientButton"));
		model.addAttribute("permittedToUseDeletePatientButton", isPermitted(authentication, "use",
				om.readTree("{ \"id\": " + id + ", \"uiElement\": \"ui:view:patient:deletePatientButton\"}")));

		return "patient";
	}

	@PreEnforce
	@DeleteMapping("/patients/{id}")
	public String deletePatient(@PathVariable Long id) {
		patientenRepo.deleteById(id);
		return REDIRECT_PATIENTS;
	}

	@PreEnforce
	@GetMapping("/patients/{id}/update")
	public String updatePatient(@PathVariable Long id, Model model, Authentication authentication) throws IOException {
		Patient patient = patientenRepo.findById(id).orElseThrow(ResourceNotFoundException::new);
		model.addAttribute("patient", patient);
		model.addAttribute("permittedToUpdateDiagnosis",
				isPermitted(authentication, "edit", "ui:view:patients:diagnosisField"));
		model.addAttribute("permittedToUpdateIcdClassification",
				isPermitted(authentication, "edit", "ui:view:patients:icd11Field"));
		model.addAttribute("permittedToUpdateAttendingDoctor",
				isPermitted(authentication, "edit", "ui:view:patients:doctorField"));
		model.addAttribute("permittedToUpdateAttendingNurse",
				isPermitted(authentication, "edit", "ui:view:patients:nurseField"));
		return "updatePatient";
	}

	@PreEnforce
	@PutMapping("/patients/{id}")
	public String updatePatient(@ModelAttribute("patient") Patient patient, @PathVariable Long id) {
		log.info("Got patient: {}", patient);
		if (patient.getName() != null) {
			patientenRepo.updateNameById(patient.getName(), id);
		}

		if (patient.getDiagnosisText() != null) {
			patientenRepo.updateDiagnosisTextById(patient.getDiagnosisText(), id);
		}

		if (patient.getIcd11Code() != null) {
			patientenRepo.updateIcd11CodeById(patient.getIcd11Code(), id);
		}

		if (patient.getPhoneNumber() != null) {
			patientenRepo.updatePhoneNumberById(patient.getPhoneNumber(), id);
		}

		if (patient.getRoomNumber() != null) {
			patientenRepo.updateRoomNumberById(patient.getRoomNumber(), id);
		}

		if (patient.getAttendingDoctor() != null) {
			patientenRepo.updateAttendingDoctorById(patient.getAttendingDoctor(), id);
		}

		if (patient.getAttendingNurse() != null) {
			patientenRepo.updateAttendingNurseById(patient.getAttendingNurse(), id);
		}

		return REDIRECT_PATIENTS + "/" + id;
	}

	private boolean isPermitted(Object subject, Object action, Object resource) {
		return pep.enforce(subject, action, resource).blockFirst() == Decision.PERMIT;
	}

}
