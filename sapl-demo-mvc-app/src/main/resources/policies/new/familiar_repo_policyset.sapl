// Import the filter library, so that 'blacken' can be used directly instead of using the absolute name 'filter.blacken'.
import filter.*

set "FamiliarRepository"

/*
 * The 'first-applicable' combination algorithm is used here in oder to avoid 'transformation uncertainty',
 * i.e., multiple policies which return PERMIT but do not agree about transformation of the resource.
 * This algorithm evaluates policies from top to bottom in the document and stops as soon as one policy 
 * yields an applicable result or errors.
 */
first-applicable

/*
 * This 'for' statement ensures, that the policies are only checked when they are actions, e.g., method calls,
 * in the designated Java class.
 * In this case, spring will indirectly implement the FamiliarRepository interface and it may not appear directly 
 * in the method signatures, e.g. when using default methods from CrudRepositories. Thus we inspect the class 
 * hierarchy and interfaces implemented by the class to scope the policy set.
 */
for "FamiliarRepository" in action.java.instanceof..simpleName

/* #### SYSTEM/ADMIN ACCESS #### */

/*
 * System can perform all actions
 */
policy "system can create/update/delete familiar relations"
permit 
       action.java.name == ".*"
where
	("ROLE_SYSTEM" in subject..authority);

/*
 * Administrators can perform all actions but action will be logged
 */
policy "system can create/update/delete familiar relations"
permit 
       action.java.name == ".*"
where
	("ROLE_ADMIN" in subject..authority);
advice
	{
		"type" 		: "logAccess",
		"message"	: ("Administrator " + subject.name + " has manipulated treatment relation: " + action.java.name)
	}


/* #### PATIENT ACCESS #### */

/*
 * Patient can access own familiars
 */
policy "patient can see own familiar"
permit 
       action.java.name == "findByPatientId"
where
	("ROLE_PATIENT" in subject..authority);
	subject.patientId == action.arguments[0]

/*
 * Patient can add own familiars
 */
policy "patient can create familiar"
permit 
       action.java.name == "save"
where
	("ROLE_PATIENT" in subject..authority);
	subject.patientId == action.arguments[0].patientId


/* #### FAMILIAR ACCESS #### */

/*
 * Familiar can access familiars of patient
 */
policy "familiar can see other familiars"
permit 
       action.java.name == "findByPatientId"
where
   "ROLE_VISITOR" in subject..authority;
   subject.name in action.arguments[0].<patient.familiars>; 

/*
 * Familiar can add other familiars
 */
policy "familiar can create other familiar"
permit 
       action.java.name == "save"
where
   "ROLE_VISITOR" in subject..authority;
   subject.name in action.arguments[0].patientId.<patient.familiars>; 




