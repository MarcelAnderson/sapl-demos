// Import the filter library, so that 'blacken' can be used directly instead of using the absolute name 'filter.blacken'.
import filter.*

set "TreatmentRepository"

/*
 * The 'first-applicable' combination algorithm is used here in oder to avoid 'transformation uncertainty',
 * i.e., multiple policies which return PERMIT but do not agree about transformation of the resource.
 * This algorithm evaluates policies from top to bottom in the document and stops as soon as one policy 
 * yields an applicable result or errors.
 */
first-applicable

/*
 * This 'for' statement ensures, that the policies are only checked when they are actions, e.g., method calls,
 * in the designated Java class.
 * In this case, spring will indirectly implement the TreatmentRepository interface and it may not appear directly 
 * in the method signatures, e.g. when using default methods from CrudRepositories. Thus we inspect the class 
 * hierarchy and interfaces implemented by the class to scope the policy set.
 */
for "TreatmentRepository" in action.java.instanceof..simpleName

/* #### SYSTEM/ADMIN ACCESS #### */

/*
 * System can perform all actions
 */
policy "system can create/update/delete treatment relations"
permit 
       action.java.name == ".*"
where
	("ROLE_SYSTEM" in subject..authority);

/*
 * Administrators can perform all actions but action will be logged
 */
policy "system can create/update/delete treatment relations"
permit 
       action.java.name == ".*"
where
	("ROLE_ADMIN" in subject..authority);
advice
	{
		"type" 		: "logAccess",
		"message"	: ("Administrator " + subject.name + " has manipulated treatment relation: " + action.java.name)
	}

/* #### MEDICAL STAFF ACCESS #### */

/*
 * Medical staff can create/delete treatment relation
 */
policy "medical staff can create/delete treatment relation"
permit 
       action.java.name == "save"
    |  action.java.name == "deleteById"
where
	("ROLE_DOCTOR" in subject..authority) || ("ROLE_NURSE" in subject..authority);


/*
 * Doctors have access to all treatment relations
 */
policy "medical staff can create/delete treatment relation"
permit 
       action.java.name == "^find.*"
where
	("ROLE_DOCTOR" in subject..authority);


/*
 * Nurses can see all treatment relations of a specific patient
 */
policy "nurses cann access treatment relations of patient"
permit 
       action.java.name == "findByPatientId"
where
	("ROLE_NURSE" in subject..authority);

/*
 * Nurses can see their own treatment relations
 */
policy "nurses can access own treatment relations"
permit 
       action.java.name == "findByUsername"
where
	("ROLE_NURSE" in subject..authority);
	subject.name == action.arguments[0];


/* #### VISITOR ACCESS #### */

/*
 * Visitors which are familiars have access to treating relations.
 * TODO: Begriff f√ºr Patientenvertreteter/Vertrauter
 */
policy "visiting familiars can access treating relations"
permit 
		action.java.name == "findByPatientId"
where 
       "ROLE_VISITOR" in subject..authority;
       subject.name in action.arguments[0].<patient.familiars>; 






