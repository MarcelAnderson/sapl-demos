name: build

on:
  push:
    branches: [master]
  repository_dispatch:
    branches: [master]

jobs:
  tests:
    strategy:
      matrix:
        java: [ '17' ]
        os: [ubuntu-latest, windows-latest, macos-latest]
    name: JDK ${{ matrix.java }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Check out
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: ${{ matrix.java }}
        cache: 'maven'

    - name: Set up Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Set up Web3j in case servers for releases should be unreachable
      run: |
        mkdir ~/.web3j
        mkdir ~/.web3j/solc
        cp sapl-demo-ethereum/src/main/solc/releases.json ~/.web3j/solc

    - name: Run tests
      run: mvn -B test

    - name: Package
      run: mvn -B package -Pproduction -DskipTests

    - name: Clean up local repository before caching (Linux/Mac)
      if: ${{ matrix.os != 'windows-latest'}}
      run: rm -rf ~/.m2/repository/io/sapl

    - name: Clean up local repository before caching (Win)
      if: ${{ matrix.os == 'windows-latest'}}
      run: rm -Recurse -Force ~/.m2/repository/io/sapl

  analyze:
    needs: [tests]
    name: Code analysis and coverage
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: 17
        cache: 'maven'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Set up Web3j in case servers for releases should be unreachable
      run: |
        mkdir ~/.web3j
        mkdir ~/.web3j/solc
        cp sapl-demo-ethereum/src/main/solc/releases.json ~/.web3j/solc

    - name: Run analysis (JaCoCo, Sonar)
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B org.jacoco:jacoco-maven-plugin:0.8.7:prepare-agent verify org.jacoco:jacoco-maven-plugin:0.8.7:report sonar:sonar -Dsonar.host.url=https://sonar.ftk.de -Dsonar.login=${SONAR_TOKEN} -Dsonar.exclusions=**/xtext-gen/**/*,**/xtend-gen/**/*,**/emf-gen/**/*
      
    - name: Clean up local repository before caching
      run: rm -rf ~/.m2/repository/io/sapl


  dockerize:
    needs: [tests]
    name: Deliver server images
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: 17
        cache: 'maven'

    - name: Configure servers
      uses: s4u/maven-settings-action@v2.3.0
      with:
        githubServer: false
        servers: |
          [{
              "id": "ghcr.io",
              "username": "${{ secrets.GHUB_USERNAME }}",
              "password": "${{ secrets.GHUB_ACCESS_TOKEN }}"
           }]
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Build Modules
      run: mvn -B install -DskipTests -pl sapl-demo-playground -P production

    - name: Build SAPL Demo Playground Image
      run: mvn -B dockerfile:build -pl sapl-demo-playground -P docker,production -DskipTests

    - name: Push Image
      run: mvn -B dockerfile:push -pl sapl-demo-playground -P docker,production -DskipTests

    - name: Clean up local repository before caching 
      run: rm -rf ~/.m2/repository/io/sapl