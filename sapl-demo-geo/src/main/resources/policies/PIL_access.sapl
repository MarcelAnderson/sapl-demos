import geo.*

set "PIL_access_control"
deny-overrides
var pmdTrack = { "deviceID": subject.personalIdentifier, "url": pmdTracking.serverUrl, "credentials": pmdTracking.credentials, "posValidityTimespan": pmdTracking.posValidityTimespan};
var trackedPMD = pmdTrack.<io.sapl.pip.geo.traccar>;


	policy "basic_authorization"
	permit action == "PIL:RETRIEVE"
	where
	  subject.personalIdentifier =~ "^a[0-9]{5}";
	  subject.operationalStatus == param.operationalStatus;
	  isValid(trackedPMD.position); 
	 
	
	policy "restrict_meta_data"
	deny action == "PIL:RETRIEVE" & resource.classification >= param.meta
	where
		var trustedLocations = resToGeometryBag(trustServer.<io.sapl.pip.geo.kml>.geofences.*);
		!(trackedPMD.accuracy <= param.minAccuracy);
		!(trackedPMD.trust < param.minTrust);
		!within(trackedPMD.position, trustedLocations);
		
		
	policy "restrict_restricted_data"
	deny action == "PIL:RETRIEVE" & resource.classification >= param.restricted
	where
		var stations = stationsDB.<io.sapl.pip.geo.postgis>.geofences;
		var airports = airportsDB.<io.sapl.pip.geo.postgis>.geofences;
		var proj = getProjection(param.wgs84, param.webMercator);
		var invProj = getProjection(param.webMercator, param.wgs84);
		var airportArea = project(buffer(project(airports[(resource.depAp)], proj), 5000), invProj);
		
		var allowedArea = union(airportArea, stations[(resource.depAp)]);
	    !contains(allowedArea, trackedPMD.position);
			
	
	policy "restrict_confidential_data"
	deny action == "PIL:RETRIEVE" & resource.classification >= param.confidential
	where
		var trackedAC = aircraftTracking.<io.sapl.pip.geo.postgis>.geofences;
		!isWithinGeoDistance(trackedAC[(resource.acReg)], trackedPMD.position, param.maxDistFromAc);
		
				