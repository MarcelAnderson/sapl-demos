// Import the filter library, so that 'blacken' can be used directly instead of using the absolute name 'filter.blacken'.
import filter.*

set "PatientRepository"

/*
 * The 'first-applicable' combination algorithm is used here in oder to avoid 'transformation uncertainty',
 * i.e., multiple policies which return PERMIT but do not agree about transformation of the resource.
 * This algorithm evaluates policies from top to bottom in the document and stops as soon as one policy 
 * yields an applicable result or errors.
 */
first-applicable

/*
 * This 'for' statement ensures, that the policies are only checked when they are actions, e.g., method calls,
 * in the designated Java class.
 * In this case, spring will indirectly implement the PatientRepository interface and it may not appear directly 
 * in the method signatures, e.g. when using default methods from CrudRepositories. Thus we inspect the class 
 * hierarchy and interfaces implemented by the class to scope the policy set.
 */
for "PatientRepository" in action.java.instanceof..simpleName

/*
 * All doctors and nurses have full read access on all patient records.
 */
policy "doctor and nurse access to patient data"
permit 
    action.java.name == "findById"
where 
    "ROLE_DOCTOR" in subject..authority || "ROLE_NURSE" in subject..authority;


/*
 * This policy enables all authenticated users to see the patient list.
 */
policy "all authenticated users may see patient list"
permit        
	action.java.name == "findAll"
where
	!("ROLE_ANONYMOUS" in subject..authority);



/*
 * Administrators read access patients, however the classification and diagnosis are blackened in parts
 * also administrator access is to be documented.
 */
policy "administrator access to patient data"
permit 
    action.java.name == "findById"
where 
    "ROLE_ADMIN" in subject..authority;
obligation  
    {
        "type" : "logAccess",
		"message" : subject.name + " has accessed patient data (id="+resource.id+") as an administrator."
    }
transform 
	// filtering with text blackening
	resource |- {
                    @.icd11Code : blacken(2,0,"\u2588"),
                    @.diagnosisText : blacken(0,0,"\u2588")
                }

/*
 * Visitors which are relatives may see the name, phone number and room number.
 */
policy "visiting relatives access patient data"
permit 
    action.java.name == "findById"
where 
    "ROLE_VISITOR" in subject..authority;
    /*
     * The next condition invokes the "patient" policy information point and
     * determines the "relatives" attribute of id of the patient.
     * The policy information policy point accesses the database to determine
     * the relatives of the patient and it is checked if the subject is in the
     * list of relatives.
     */
    var url = "http://localhost:8081/rest/patients/" + standard.numberToString(resource.id) + "/relatives";
    subject.name in url.<http.get>.relatives;
transform 
	// Subtractive template with filters removing content
	resource |- {
					@.medicalRecordNumber 	: remove,
					@.icd11Code 			: remove,
					@.diagnosisText 		: remove,
					@.attendingDoctor 		: remove,
					@.attendingNurse 		: remove
				}

/*
 * Visitors which are not relatives may see the name and phone number only.
 */
policy "visiting non relatives access patient data"
permit 
    action.java.name == "findById"
where 
    "ROLE_VISITOR" in subject..authority;
transform
	// Constructive template
	{
		"id" 			: resource.id,
		"name" 			: resource.name,
		"phoneNumber"	: resource.phoneNumber
	}


/*
 * Permit attending doctors to delete their patients.
 */
policy "attending doctors may delete patient data of their patients"
permit 
    action.java.name == "deleteById"
where
	"ROLE_DOCTOR" in subject..authority;
    var url = "http://localhost:8081/rest/patients/" + standard.numberToString(action.arguments[0]);
    subject.name == url.<http.get>.attendingDoctor;

/*
 * Doctors and system processes (during application startup) may create new patients.
 * 
 * In the demo, new patients are also created during application startup. In this case a technical subject
 * with authority "ROLE_SYSTEM" is defined to access the patient repository.
 */
policy "doctors and system processes may create patients"
permit 
    action.java.name == "save"
where
	"ROLE_SYSTEM" in subject..authority || "ROLE_DOCTOR" in subject..authority;

/*
 * System may search by name. 
 */
policy "system search by name"
permit 
    action.java.name == "findByName"
where
	"ROLE_SYSTEM" in subject..authority;

/*
 * Only the attending doctor may change diagnosis information or the 
 * attending doctor without any side effects.  
 */
policy "attending doctors may update diagnosis and attending doctors"
permit 
	action.java.name in ["updateDiagnosisTextById", "updateIcd11CodeById", "updateAttendingDoctorById"]
where
	"ROLE_DOCTOR" in subject..authority;
    var url = "http://localhost:8081/rest/patients/" + standard.numberToString(action.arguments[1]);
    subject.name == url.<http.get>.attendingDoctor;

/*
 * All doctors may change diagnosis information or the attending doctor.
 * But the (original) attending doctor must be notified about the change.
 * 
 * This is an emergency override. The so-called "breaking the glass scenario".  
 */
policy "breaking the glass"
permit 
	action.java.name in ["updateDiagnosisTextById", "updateIcd11CodeById", "updateAttendingDoctorById"]
where
	"ROLE_DOCTOR" in subject..authority;
    var url = "http://localhost:8081/rest/patients/" + standard.numberToString(action.arguments[1]);
    var patient = url.<http.get>;
obligation
	{
		"type"		: "sendEmail",
		"recipient"	: patient.attendingDoctor,
		"subject"	: "Data of your patient " + patient.name + " was changed.",
		"message"	: "Doctor " + subject.name + " changed the data."
	}
	
/*
 * All doctors and nurses may update attending nurse, name, phone number and room number fields.
 */
policy "doctors and nurses may change other fields"
permit 
		action.java.name == "updateAttendingNurseById" 
	|	action.java.name == "updateNameById"
	|	action.java.name == "updatePhoneNumberById" 
	|	action.java.name == "updateRoomNumberById" 

where
	"ROLE_DOCTOR" in subject..authority || "ROLE_NURSE" in subject..authority;

/*
 * Permit administrators to update patients, but the action SHOULD be logged and an email MUST be sent.
 */
policy "administrators may update patients, but it has to be reported"
permit 
    action.java.name =~ "^update.*"
where
	"ROLE_ADMIN" in subject..authority;
    var url = "http://localhost:8081/rest/patients/" + standard.numberToString(action.arguments[1]);
    var patient = url.<http.get>;
obligation
	{
		"type"		: "sendEmail",
		"recipient"	: "Dr. Gregory House <houseMD@ppth.med>",
		"subject"	: "Patient data updated by administrator.",
		"message"	: ("Administrator " + subject.name + " has updated data of patient " + patient.name)
	}
advice
	{
		"type" 		: "logAccess",
		"message"	: ("Administrator " + subject.name + " has updated data of patient " + patient.name)
	}

/*
 * Permit administrators to delete patients, but the action SHOULD be logged and an email MUST be sent.
 */
policy "administrators may delete patients, but it has to be reported"
permit
    action.java.name == "deleteById"
where
	"ROLE_ADMIN" in subject..authority;
    var url = "http://localhost:8081/rest/patients/" + standard.numberToString(action.arguments[0]);
    var patient = url.<http.get>;
obligation
	{
		"type"		: "sendEmail",
		"recipient"	: "Dr. Gregory House <houseMD@ppth.med>",
		"subject"	: "Patient deleted by administrator.",
		"message"	: ("Administrator " + subject.name + " has deleted patient " + patient.name)
	}
advice
	{
		"type" 		: "logAccess",
		"message"	: ("Administrator " + subject.name + " has deleted patient " + patient.name)
	}
