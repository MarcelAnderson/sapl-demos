import org.demo.shared.functions.PatientFunction as patientfunction

set "accessPolicy"
deny-unless-permit

/*
 * Doctors may create new patients.
 *
 * In the demo, new patients are also created during application startup. In this case there is no subject defined.
 * So subject == null when the access comes from a system process not linked to a user session.
 * System processes are also permitted to create patients.
 *
 */
policy "doctors and system processes may create patients"
permit
       action.java.shortSig == "PatientRepository.save(..)"
where
	subject == null || ("DOCTOR" in subject..authority);



policy "permit_doctor_read_HRN"
permit
    action == "read"
where
  "DOCTOR" in subject..authority;
  resource == "HRN";

policy "permit_doctor_update_HRN"
permit
   action == "update"
where
   "DOCTOR" in subject..authority;
   resource == "HRN";
   
   
policy "permit_doctor_update_attending_doctor"
permit
   action == "update"
where
   "DOCTOR" in subject..authority;
   resource == "doctor";
advice
   { "type" : "sendEmail",
     "recipient" : "supervisor@example.org",
     "subject" : "Attending Doctor was changed",
     "message" : subject.name + " has changed an attending Doctor"
   }  
 
   
policy "permit_nurse_update_attending_nurse"
permit
   action == "update"
where
   "NURSE" in subject..authority;
   resource == "nurse";
advice
   { "type" : "sendEmail",
     "recipient" : "supervisor@example.org",
     "subject" : "Attending Nurse was changed",
     "message" : subject.name + " has changed an attending Nurse"
   }  


policy "get_blacken_and_obligation_test"
permit
    action == "getBlackenAndObligation"
where
    "NURSE" in subject..authority;
obligation
    { "type" : "coffee",
      "key1": "Refill Coffee!",
      "coffeeAddiction": "seriously"
    }
transform 
	resource |- filter.blacken(1,0,"\u2588")


policy "permit_attending_doctor_see_diagnosis"
permit
   action == "readDiagnosis"
where
   subject.name == resource.attendingDoctor;
advice
   { "type" : "simpleLogging",
     "message" : subject.name + " has looked up the diagnosis of " + resource.name
   }
   

policy "permit_attending_nurse_see_diagnosis"
permit
   action == "readDiagnosis"
where
   subject.name == resource.attendingNurse;
obligation
   { "type" : "sendEmail",
     "recipient" : "supervisor@example.org",
     "subject" : "Diagnosis access by nurse",
     "message" : subject.name + " has looked up the diagnosis of " + resource.name
   }
   



policy "permit_attending_doctor_update_diagnosis"
permit
   action == "updateDiagnosis"
where
   subject.name == resource.attendingDoctor;


/*
policy "permit_relative_see_room_number"
permit
   action == "viewRoomNumber"
where
  subject.name in resource.id.<patient.related>;
*/


policy "permit_relative_see_room_number_with_function"
permit
 action == "viewRoomNumberFunction"
where
 subject.name in patientfunction.related(resource.id);


policy "permit_doctor_create_patient_profiles"
permit
    action == "createPatientProfile"
where
  "DOCTOR" in subject..authority;


  
policy "permit_doctor_Jwt"
permit
    action == "GET"
where
  "DOCTOR" in subject.details.authorities;
  resource == "/jwt";
  
