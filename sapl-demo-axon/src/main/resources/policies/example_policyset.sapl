import filter.*
set "CommandSide"

first-applicable

/* used for setting up prerequisites for demo */
policy "Allow demoapp subject to perform any action"
permit
    subject.name == "demoapp"

policy "Allow admin users to perform any action"
permit
	"ROLE_ADMIN" in subject..authority


/* policies for demonstration of constraint handling */
policy "Constraint Handling Scenario 1: MessageConsumerHandlerProvider - Logging patient data for patients participating in study"

permit
    action.name == "UpdateMedicalRecordCommand" & action.message.id == "42"

obligation
        {
        "logForAuditing" : "log data for pharmaceutical study"
        }

policy "Constraint Handling Scenario 2: AggregateConstraintHandler - Doctor on probation is not allowed to apply treatment if clinical record is not available"

permit
    action.name == "UpdateMedicalRecordCommand"

where
    subject.name == "doctorOnProbation";

obligation
        {
        "checkForEmployeesOnProbation" : "if no clinical record must be created"
        }

policy "Example Entity log"    
permit
    action.name == "UpdateBloodCountCommand"

where
    subject.name == "doctorOnProbation";

obligation
        {
        "log event" : "blood count event"
        }

policy "Constraint Handling Scenario 3: (Result-) MapperConstraintHandlerProvider: External service should only get pulse range [0,1,2] instead of exact value"

permit
    action.name == "FetchSinglePulseQuery"

where
    subject.name == "externalService";

obligation
        {
        "applyMapping" : "map pulse to range"
        }

policy "Logging Policy with Obligation, if user='user2'"

permit
    action.name == "UpdateMedicalRecordCommand"

where
    subject.name == "user2";

obligation
        {
        "type" : "logAccess",
        "message" : "access permitted for user: " + subject.name
        }

policy "Example for transformation of Resource (query result): user5 is not allowed to view oxygenSaturation and id of patient"

permit
    action.name == "FetchMedicalRecordSummaryQuery"

where
    subject.name == "user5";

transform
    resource  |- {
            @.queryResult.oxygenSaturation : remove,
            @.queryResult.id : remove,
            @.queryResult.patientName : blacken(2,0,"\u2588")
    }

/* --- */
policy "scenario where query is decorated with @EnforceTillDenied"
permit
    action.name == "FetchMedicalRecordSummaryQuery"
where
        subject.name == "user2";
        time.secondOf(<time.now>) < 40;
          

policy "scenario where query is decorated with @EnforceDropWhileDenied"
permit
    action.name == "FetchOxygenSaturationQuery"
where
        subject.name == "user2";
        <time.toggle(5000,5000)>;

policy "scenario where query is decorated with @EnforceRecoverableIfDenied"
permit
    action.name == "FetchPulseQuery"
where
        subject.name == "user2";
        <time.toggle(5000,5000)>;

/*
 * Example for usage of SpEL in resource for UpdateMedicalRecordCommand
 */  
policy "patients can update their own record"
permit
	"ROLE_PATIENT" in subject..authority
where
	action.name == "UpdateMedicalRecordCommand";
	resource.patientName == subject.name;
	

/*
 * Example for usage of SpEL in action for CreateMedicalRecordWithClinical
 */
policy "nurse can only create medical records when clinical available"
permit
	"ROLE_NURSE" in subject..authority
where
	action.name == "CreateMedicalRecordWithClinicalCommand";
	action.hasClinicalRecordAvailable == true;
	
    
    
