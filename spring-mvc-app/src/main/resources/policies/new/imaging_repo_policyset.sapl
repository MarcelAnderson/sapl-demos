// Import the filter library, so that 'blacken' can be used directly instead of using the absolute name 'filter.blacken'.
import filter.*

set "ImagingRepository"

/*
 * The 'first-applicable' combination algorithm is used here in oder to avoid 'transformation uncertainty',
 * i.e., multiple policies which return PERMIT but do not agree about transformation of the resource.
 * This algorithm evaluates policies from top to bottom in the document and stops as soon as one policy 
 * yields an applicable result or errors.
 */
first-applicable

/*
 * This 'for' statement ensures, that the policies are only checked when they are actions, e.g., method calls,
 * in the designated Java class.
 * In this case, spring will indirectly implement the ImagingRepository interface and it may not appear directly 
 * in the method signatures, e.g. when using default methods from CrudRepositories. Thus we inspect the class 
 * hierarchy and interfaces implemented by the class to scope the policy set.
 */
for "ImagingRepository" in action.java.instanceof..simpleName

/* #### SYSTEM/ADMIN ACCESS #### */

/*
 * System can perform all actions
 */
policy "system can create/update/delete imaging"
permit 
       action.java.name == ".*"
where
	("ROLE_SYSTEM" in subject..authority);

/*
 * Administrators can perform all actions but action will be logged
 */
policy "system can create/update/delete imaging"
permit 
       action.java.name == ".*"
where
	("ROLE_ADMIN" in subject..authority);
	var patientId = resource.patientId
advice
	{
		"type" 		: "logAccess",
		"message"	: ("Administrator " + subject.name + " has manipulated medication of patient " + patientId + ": " + action.java.name + "")


/* #### MEDICAL STAFF ACCESS #### */

/*
 * Doctors working in radiology department have full access on imaging
 */
policy "radiology doctors full access on imaging"
permit 
       action.java.name == ".*"
where
	("ROLE_DOCTOR" in subject..authority) && ("ROLE_RADIOLOGY" in subject..authority);


/*
 * Medical staff working in radiology department can create imaging
 */
policy "medical radiology staff can create imaging for patients"
permit 
       action.java.name == "save"
where
	("ROLE_DOCTOR" in subject..authority) || ("ROLE_NURSE" in subject..authority);
	("ROLE_RADIOLOGY" in subject..authority);

/*
 * Staff working in radiology department have full read access but without patient information.
 */
policy "radiology staff can access all laboratory entries"
permit 
		action.java.name == "findAll"
	|	action.java.name == "findById"
	|	action.java.name == "findByImageType"
where
	("ROLE_RADIOLOGY" in subject..authority);
transform 
		resource |- { 
						@.patientId 	: remove
					}

/*
 * Treating medical staff can access patients imaging
 */
policy "treating medical staff access on patient laboratory"
permit 
       action.java.name == "findByPatientId"
where
	("ROLE_DOCTOR" in subject..authority) || ("ROLE_NURSE" in subject..authority);
	subject.name == action.arguments[0].<patient.treating>;







