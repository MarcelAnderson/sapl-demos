package org.demo.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;

import org.demo.domain.Patient;
import org.demo.domain.PatientRepository;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.sapl.spring.PolicyEnforcementPoint;
import io.sapl.spring.annotation.EnforcePolicies;
import io.sapl.spring.annotation.Resource;
import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class UIController {

	private static final String REDIRECT_PATIENTS = "redirect:/patients";

	private final ObjectMapper om;
	private final PolicyEnforcementPoint pep;
	private final PatientRepository patientenRepo;

	@ResponseStatus(value = HttpStatus.NOT_FOUND)
	public static class ResourceNotFoundException extends RuntimeException {
	}

	@EnforcePolicies
	@GetMapping("/patients")
	public String getPatients(HttpServletRequest request, Model model, Authentication authentication) {
		model.addAttribute("patients", patientenRepo.findAll());
		model.addAttribute("permittedToUseCreatePatientButton",
				pep.enforce(authentication, "use", "ui:view:patients:createPatientButton"));
		return "patients";
	}

	@EnforcePolicies
	@PostMapping("/patients")
	public String createPatient(@ModelAttribute(value = "newPatient") Patient patient) {
		if (patient.getId() != null) {
			throw new IllegalArgumentException("Patient has a predefined id. Should be autogenerated.");
		}
		patientenRepo.save(patient);
		return REDIRECT_PATIENTS;
	}

	@GetMapping("/patients/new")
	@EnforcePolicies(action = "viewPatientCreationForm", resource = "/patients/new")
	public String linkNew(Model model) {
		Patient newPatient = new Patient();
		model.addAttribute("newPatient", newPatient);
		return "newPatient";
	}

	@EnforcePolicies
	@GetMapping("/patients/{id}")
	public String getPatient(@PathVariable Long id, Model model, Authentication authentication) throws IOException {
		Patient patient = patientenRepo.findById(id).orElseThrow(ResourceNotFoundException::new);

		model.addAttribute("patient", patient);
		model.addAttribute("permittedToUseUpdatePatientButton", pep.enforce(authentication, "use",
				om.readTree("{ \"id\": " + id + ", \"uiElement\": \"ui:view:patient:updatePatientButton\"}")));
		model.addAttribute("permittedToUseDeletePatientButton", pep.enforce(authentication, "use",
				om.readTree("{ \"id\": " + id + ", \"uiElement\": \"ui:view:patient:deletePatientButton\"}")));

		return "patient";
	}

	@EnforcePolicies
	@DeleteMapping("/patients/{id}")
	public String deletePatient(@PathVariable Long id) {
		patientenRepo.deleteById(id);
		return REDIRECT_PATIENTS;
	}

	@GetMapping("/patients/{id}/update")
	@EnforcePolicies(action = "viewPatientUpdateForm")
	public String linkUpdate(@Resource @PathVariable Long id, Model model, Authentication authentication)
			throws IOException {
		Patient patient = patientenRepo.findById(id).orElseThrow(ResourceNotFoundException::new);

		model.addAttribute("patient", patient);
		model.addAttribute("permittedToUpdateDiagnosis", pep.enforce(authentication, "edit",
				om.readTree("{ \"id\": " + id + ", \"uiElement\": \"ui:view:patients:diagnosisField\"}")));
		model.addAttribute("permittedToUpdateIcdClassification", pep.enforce(authentication, "edit",
				om.readTree("{ \"id\": " + id + ", \"uiElement\": \"ui:view:patients:icd11Field\"}")));
		model.addAttribute("permittedToUpdateAttendingDoctor", pep.enforce(authentication, "edit",
				om.readTree("{ \"id\": " + id + ", \"uiElement\": \"ui:view:patients:doctorField\"}")));
		model.addAttribute("permittedToUpdateAttendingNurse", pep.enforce(authentication, "edit",
				om.readTree("{ \"id\": " + id + ", \"uiElement\": \"ui:view:patients:nurseField\"}")));

		return "updatePatient";
	}

	@EnforcePolicies
	@PutMapping("/patient")
	public String updatePatient(@ModelAttribute(value = "updatedPatient") Patient updatedPatient,
			@ModelAttribute(value = "patient") Patient patient, Authentication authentication) {

		if (!updatedPatient.getName().equals(patient.getName())) {
			patientenRepo.updateNameById(patient.getName(), patient.getId());
		}

		if (!updatedPatient.getDiagnosisText().equals(patient.getDiagnosisText())) {
			patientenRepo.updateDiagnosisTextById(patient.getDiagnosisText(), patient.getId());
		}

		if (!updatedPatient.getIcd11Code().equals(patient.getIcd11Code())) {
			patientenRepo.updateIcd11CodeById(patient.getIcd11Code(), patient.getId());
		}

		if (!updatedPatient.getPhoneNumber().equals(patient.getPhoneNumber())) {
			patientenRepo.updatePhoneNumberById(patient.getIcd11Code(), patient.getId());
		}

		if (!updatedPatient.getAttendingDoctor().equals(patient.getAttendingDoctor())) {
			patientenRepo.updateAttendingDoctorById(patient.getIcd11Code(), patient.getId());
		}

		if (!updatedPatient.getAttendingNurse().equals(patient.getAttendingNurse())) {
			patientenRepo.updateAttendingNurseById(patient.getIcd11Code(), patient.getId());
		}

		return REDIRECT_PATIENTS + "/" + patient.getId();
	}

}
